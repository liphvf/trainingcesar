package training.bms.persistence;

import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.EntityTransaction;
import javax.persistence.TypedQuery;

import training.bms.business.Post;
import training.bms.business.PostSearchOptions;

public class PostDao {

	public boolean containsPost(String postTitle) {

		return searchPost(postTitle) != null;
	}

	public void insertPost(Post post) {
		EntityManagerFactory factory = EntityManagerFactoryHolder.factory;
		EntityManager manager = factory.createEntityManager();
		EntityTransaction transaction = manager.getTransaction();

		transaction.begin();
		manager.persist(post);
		transaction.commit();

	}

	public Post searchPost(String postTitle) {
		EntityManagerFactory factory = EntityManagerFactoryHolder.factory;
		EntityManager manager = factory.createEntityManager();
		TypedQuery<Post> query = manager
				.createQuery(
						"SELECT post FROM training.bms.business.Post post WHERE UPPER(post.title) = :postTitle",
						Post.class);
		query.setParameter("postTitle", postTitle.toUpperCase());
		List<Post> result = query.getResultList();
		if (result.isEmpty()) {
			return null;
		} else {
			return result.get(0);
		}
	}

	public List<Post> searchPost(PostSearchOptions options) {

		StringBuilder predicate = new StringBuilder("1 = 1");

		if (options.getTitle() != null && options.getTitle().length() > 0) {
			predicate.append(" and upper(post.title) like :postTitle");
		}
		if (options.getContent() != null && options.getContent().length() > 0) {
			predicate
					.append(" and upper(post.description) like :postDescription");
		}

		if (options.getCreatedAt() != null) {
			predicate.append(" and upper(post.createdAt) = :postCreatedAt");
		}

		if (options.getAuthor() != null && options.getAuthor().length() > 0) {
			predicate.append(" and upper(post.author) like :postAuthor");
		}

		EntityManagerFactory factory = EntityManagerFactoryHolder.factory;
		EntityManager manager = factory.createEntityManager();
		TypedQuery<Post> query = manager.createQuery(
				"SELECT post FROM training.bms.business.Post post where "
						+ predicate, Post.class);

		if (options.getTitle() != null && options.getTitle().length() > 0) {
			query.setParameter("postTitle", "%"
					+ options.getTitle().toUpperCase() + "%");
		}

		if (options.getContent() != null && options.getContent().length() > 0) {
			query.setParameter("postDescription", "%"
					+ options.getContent().toUpperCase() + "%");
		}

		if (options.getAuthor() != null && options.getAuthor().length() > 0) {
			query.setParameter("postAuthor", "%"
					+ options.getAuthor().toUpperCase() + "%");
		}

		if (options.getCreatedAt() != null) {
			query.setParameter("postCreatedAt", options.getCreatedAt());
		}

		/*
		 * TypedQuery<Post> query = manager.createQuery(
		 * "SELECT post FROM training.bms.business.Post post WHERE UPPER(post.name) = :postName AND UPPER(post.description) = :postDescription"
		 * , Post.class); query.setParameter("postName",
		 * options.getName().toUpperCase());
		 * query.setParameter("postDescription",
		 * options.getDescription().toUpperCase());
		 */

		if (options.getStartPosition() != null) {
			query.setFirstResult(options.getStartPosition());
		}
		if (options.getMaxResult() != null) {
			query.setMaxResults(options.getMaxResult());
		}

		List<Post> result = query.getResultList();

		return result;
	}
	
	public int searchPostCount(PostSearchOptions options) {

		StringBuilder predicate = new StringBuilder("1 = 1");

		if (options.getTitle() != null && options.getTitle().length() > 0) {
			predicate.append(" and upper(post.title) like :postTitle");
		}
		if (options.getContent() != null && options.getContent().length() > 0) {
			predicate
					.append(" and upper(post.description) like :postDescription");
		}

		if (options.getCreatedAt() != null) {
			predicate.append(" and upper(post.createdAt) = :postCreatedAt");
		}

		if (options.getAuthor() != null && options.getAuthor().length() > 0) {
			predicate.append(" and upper(post.author) like :postAuthor");
		}

		EntityManagerFactory factory = EntityManagerFactoryHolder.factory;
		EntityManager manager = factory.createEntityManager();
		TypedQuery<Integer> query = manager.createQuery(
				"SELECT count(post) FROM training.bms.business.Post post where "
						+ predicate, Post.class);

		if (options.getTitle() != null && options.getTitle().length() > 0) {
			query.setParameter("postTitle", "%"
					+ options.getTitle().toUpperCase() + "%");
		}

		if (options.getContent() != null && options.getContent().length() > 0) {
			query.setParameter("postDescription", "%"
					+ options.getContent().toUpperCase() + "%");
		}

		if (options.getAuthor() != null && options.getAuthor().length() > 0) {
			query.setParameter("postAuthor", "%"
					+ options.getAuthor().toUpperCase() + "%");
		}

		if (options.getCreatedAt() != null) {
			query.setParameter("postCreatedAt", options.getCreatedAt());
		}

		/*
		 * TypedQuery<Post> query = manager.createQuery(
		 * "SELECT post FROM training.bms.business.Post post WHERE UPPER(post.name) = :postName AND UPPER(post.description) = :postDescription"
		 * , Post.class); query.setParameter("postName",
		 * options.getName().toUpperCase());
		 * query.setParameter("postDescription",
		 * options.getDescription().toUpperCase());
		 */

		if (options.getStartPosition() != null) {
			query.setFirstResult(options.getStartPosition());
		}
		if (options.getMaxResults() != null) {
			query.setMaxResults(options.getMaxResults());
		}

		List<Post> result = query.getResultList();

		return query.get;
	}

	public void deletePost(Post post) {
		EntityManagerFactory factory = EntityManagerFactoryHolder.factory;
		EntityManager manager = factory.createEntityManager();
		EntityTransaction transaction = manager.getTransaction();
		Post managedPost = manager.find(Post.class, post.getId());

		transaction.begin();
		manager.remove(managedPost);
		transaction.commit();
	}

	public void updatePost(Post post) {

		EntityManagerFactory factory = EntityManagerFactoryHolder.factory;
		EntityManager manager = factory.createEntityManager();
		EntityTransaction transaction = manager.getTransaction();

		transaction.begin();
		manager.merge(post);
		transaction.commit();

	}
}
